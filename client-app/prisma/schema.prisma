generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Int    @id @default(autoincrement())
  password String
  user_id  Int?   @unique(map: "user_id") @map("user_id")
  user     User?  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Account_ibfk_1")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique(map: "email")
  username     String?
  avatar_id    Int?          @map("avatar_id")
  account      Account?
  queries      Query[]
  subscription Subscription?
  avatar       Image?        @relation(fields: [avatar_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "User_ibfk_1")

  @@index([avatar_id], map: "avatar_id")
}

model Image {
  id         Int       @id @default(autoincrement())
  image_url  String
  created_at DateTime? @default(now()) @db.DateTime(0)
  queries    Query[]
  users      User[]
}

model Query {
  id         Int       @id @default(autoincrement())
  user_id    Int?      @map("user_id")
  image_id   Int?      @map("image_id")
  result     String?
  content    String?
  used_token Int
  created_at DateTime? @default(now()) @db.DateTime(0)
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Query_ibfk_1")
  image      Image?    @relation(fields: [image_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Query_ibfk_2")

  @@index([image_id], map: "image_id")
  @@index([user_id], map: "user_id")
}

model Subscription {
  id         Int       @id @default(autoincrement())
  user_id    Int?      @unique(map: "user_id") @map("user_id")
  plan_id    Int?      @map("plan_id")
  created_at DateTime? @default(now()) @db.DateTime(0)
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Subscription_ibfk_1")
  plan       Plan?     @relation(fields: [plan_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Subscription_ibfk_2")

  @@index([plan_id], map: "plan_id")
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  monthy_token  Int
  daily_token   Int
  price         Float          @db.Float
  subscriptions Subscription[]
}
